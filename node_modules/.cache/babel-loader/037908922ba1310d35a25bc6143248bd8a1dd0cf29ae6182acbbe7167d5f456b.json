{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"tl-container\"\n};\nconst _hoisted_2 = {\n  class: \"gantt-container\"\n};\nexport function render(_ctx, _cache) {\n  const _component_SideBar = _resolveComponent(\"SideBar\");\n  const _component_WBSCategory = _resolveComponent(\"WBSCategory\");\n  const _component_GanttContainer = _resolveComponent(\"GanttContainer\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_SideBar, {\n    onProjectSelected: _ctx.handleProjectSelected\n  }, null, 8 /* PROPS */, [\"onProjectSelected\"]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_WBSCategory), _createVNode(_component_GanttContainer)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_SideBar","onProjectSelected","_ctx","handleProjectSelected","_createElementVNode","_hoisted_2","_component_WBSCategory","_component_GanttContainer"],"sources":["C:\\vue_everyware\\WBS\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"tl-container\">\r\n    <SideBar @projectSelected=\"handleProjectSelected\"></SideBar>\r\n    <div class=\"gantt-container\">\r\n      <WBSCategory></WBSCategory>\r\n      <GanttContainer></GanttContainer>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SideBar from './components/SideBar';\r\nimport WBSCategory from './components/WBSCategory.vue';\r\nimport GanttContainer from \"./components/GanttContainer.vue\";\r\nimport axios from \"axios\";\r\nimport mixin from \"../mixin\";\r\n\r\nexport default {\r\n  components: { SideBar, WBSCategory, GanttContainer},\r\n  inject: [\"eventBus\"],\r\n  mixins:[mixin],\r\n  data() {\r\n    return {\r\n      selectedProject: null,\r\n      projectList: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.eventBus.on('findList',(project)=>{\r\n          console.log(project);\r\n      })\r\n\r\n  },\r\n  beforeUnmount() {\r\n    this.eventBus.off('findList');\r\n  },\r\n  method:{\r\n    findLsit(project){\r\n\r\n      axios.get(\"http://localhost:8030/api/projectList?t_key=\"+this.key)\r\n\r\n      try {\r\n        const response = await axios.get(\"http://localhost:8030/api/projectList?t_key=\"+this.key);\r\n          this.$store.dispatch('updateProjectsData', response.data);\r\n      } catch (error) {\r\n        console.log(\"Project List Rendering error >>>>\", error);\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\n.tl-container{\r\n  margin-top:88px;\r\n}\r\n\r\n\r\n\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAiB;;;;;uBAF9BC,mBAAA,CAMM,OANNC,UAMM,GALJC,YAAA,CAA4DC,kBAAA;IAAlDC,iBAAe,EAAEC,IAAA,CAAAC;EAAqB,gDAChDC,mBAAA,CAGM,OAHNC,UAGM,GAFJN,YAAA,CAA2BO,sBAAA,GAC3BP,YAAA,CAAiCQ,yBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}