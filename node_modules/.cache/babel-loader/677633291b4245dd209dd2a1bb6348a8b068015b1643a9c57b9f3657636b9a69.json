{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelRadio as _vModelRadio, withDirectives as _withDirectives, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"gantt\",\n  class: \"gantt-c\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"scale1\"\n}, \"Day scale\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"scale2\"\n}, \"Week scale\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"scale3\"\n}, \"Month scale\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"scale4\"\n}, \"Quarter scale\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"scale5\"\n}, \"Year scale\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    id: \"scale1\",\n    class: \"gantt_radio\",\n    name: \"scale\",\n    value: \"day\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedScale = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $data.selectedScale]]), _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    id: \"scale2\",\n    class: \"gantt_radio\",\n    name: \"scale\",\n    value: \"week\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedScale = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $data.selectedScale]]), _hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    id: \"scale3\",\n    class: \"gantt_radio\",\n    name: \"scale\",\n    value: \"month\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.selectedScale = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $data.selectedScale]]), _hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    id: \"scale4\",\n    class: \"gantt_radio\",\n    name: \"scale\",\n    value: \"quarter\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.selectedScale = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $data.selectedScale]]), _hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    id: \"scale5\",\n    class: \"gantt_radio\",\n    name: \"scale\",\n    value: \"year\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.selectedScale = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $data.selectedScale]]), _hoisted_6])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["ref","class","_createElementVNode","for","_hoisted_1","type","id","name","value","$data","selectedScale","$event","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6"],"sources":["C:\\vue_everyware\\WBS\\src\\components\\GanttConfig.vue"],"sourcesContent":["<template>\r\n  <div ref=\"gantt\" class=\"gantt-c\"></div>\r\n  <div>\r\n    <input\r\n      type=\"radio\"\r\n      id=\"scale1\"\r\n      class=\"gantt_radio\"\r\n      name=\"scale\"\r\n      value=\"day\"\r\n      v-model=\"selectedScale\"\r\n    />\r\n    <label for=\"scale1\">Day scale</label>\r\n\r\n    <input\r\n      type=\"radio\"\r\n      id=\"scale2\"\r\n      class=\"gantt_radio\"\r\n      name=\"scale\"\r\n      value=\"week\"\r\n      v-model=\"selectedScale\"\r\n    />\r\n    <label for=\"scale2\">Week scale</label>\r\n\r\n    <input\r\n      type=\"radio\"\r\n      id=\"scale3\"\r\n      class=\"gantt_radio\"\r\n      name=\"scale\"\r\n      value=\"month\"\r\n      v-model=\"selectedScale\"\r\n    />\r\n    <label for=\"scale3\">Month scale</label>\r\n\r\n    <input\r\n      type=\"radio\"\r\n      id=\"scale4\"\r\n      class=\"gantt_radio\"\r\n      name=\"scale\"\r\n      value=\"quarter\"\r\n      v-model=\"selectedScale\"\r\n    />\r\n    <label for=\"scale4\">Quarter scale</label>\r\n\r\n    <input\r\n      type=\"radio\"\r\n      id=\"scale5\"\r\n      class=\"gantt_radio\"\r\n      name=\"scale\"\r\n      value=\"year\"\r\n      v-model=\"selectedScale\"\r\n    />\r\n    <label for=\"scale5\">Year scale</label>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { gantt } from \"dhtmlx-gantt\";\r\nimport axios from \"axios\";\r\nimport mixin from \"../mixin\";\r\nexport default {\r\n  name: \"GanttConfig\",\r\n  mixins: [mixin],\r\n  props: {\r\n    tasks: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          data: [],\r\n        };\r\n      },\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      selectedScale: \"day\",\r\n    };\r\n  },\r\n  watch: {\r\n    selectedScale(newValue) {\r\n      switch (newValue) {\r\n        case \"day\":\r\n          this.setDayScale();\r\n          break;\r\n        case \"week\":\r\n          this.setWeekScale();\r\n          break;\r\n        case \"month\":\r\n          this.setMonthScale();\r\n          break;\r\n        case \"quarter\":\r\n          this.setQuarterScale();\r\n          break;\r\n        case \"year\":\r\n          this.setYearScale();\r\n          break;\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    loginMember() {\r\n      return this.$store.state.loginMember;\r\n    }\r\n  },\r\n    methods: {\r\n      setDayScale() {\r\n        gantt.config.scale_unit = \"day\";\r\n        gantt.config.date_scale = \"%d %M\";\r\n        gantt.config.subscales = [];\r\n        gantt.render();\r\n      },\r\n\r\n      setWeekScale() {\r\n        gantt.config.scale_unit = \"week\";\r\n        gantt.config.date_scale = \"%W\";\r\n        gantt.config.subscales = [{ unit: \"day\", step: 1, date: \"%d %M\" }];\r\n        gantt.render();\r\n      },\r\n\r\n      setMonthScale() {\r\n        gantt.config.scale_unit = \"month\";\r\n        gantt.config.date_scale = \"%F, %Y\";\r\n        gantt.config.subscales = [{ unit: \"week\", format: \"Week #%W\" }];\r\n        gantt.render();\r\n      },\r\n      setQuarterScale() {\r\n        gantt.config.scale_unit = \"quarter\";\r\n        gantt.config.date_scale = \"%M\";\r\n        gantt.config.subscales = [{ unit: \"month\", step: 1, date: \"%M\" }];\r\n        gantt.render();\r\n      },\r\n\r\n      setYearScale() {\r\n        gantt.config.scale_unit = \"year\";\r\n        gantt.config.date_scale = \"%Y\";\r\n        gantt.render();\r\n      },\r\n      //todo 저장\r\n      async saveTaskToServer(task) {\r\n        try {\r\n          const response = await axios.post(\r\n            \"http://localhost:8030/api/createTodo\",\r\n            {\r\n              t_key: this.key,\r\n              project_num:this.$store.state.selectedProject.project_num,\r\n              todoDTO: task,\r\n            }\r\n          );\r\n          console.log(response.data);\r\n          this.data=response.data;\r\n\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n    },\r\n\r\n    mounted: function () {\r\n      gantt.config.date_format = \"%Y-%m-%d\";\r\n      gantt.config.columns = [\r\n        { name: \"todo_title\", label: \"Title\", tree: true, width: 130 },\r\n        { name: \"member\", label: \"member\", align: \"center\" },\r\n        { name: \"start_date\", label: \"Start time\", align: \"center\" },\r\n        { name: \"end_date\", label: \"End time\", align: \"center\" },\r\n        { name: \"add\", label: \"\" },\r\n      ];\r\n      gantt.config.grid_width = 450;\r\n      //주 단위로 보기\r\n      //gantt.config.scale_unit = \"week\";\r\n      gantt.config.scrollable = true;\r\n      gantt.config.scale_unit = \"day\";\r\n\r\n      gantt.config.show_links = false;\r\n\r\n      gantt.templates.lightbox_header = function (start_date, end_date, task) {\r\n        return (\r\n          gantt.templates.task_time(task.start_date, task.end_date, task) +\r\n          \"&nbsp;\" +\r\n          (\r\n            gantt.templates.task_text(task.start_date, task.end_date, task.text) ||\r\n            \"\"\r\n          ).substr(0, 70)\r\n        );\r\n      };\r\n      //todo 추가 모달창 - 구성\r\n      gantt.config.lightbox.sections = [\r\n        { name: \"todo_title\", height: 38, map_to: \"todo_title\", type: \"textarea\" }, //title\r\n        { name: \"content\", height: 38, map_to: \"content\", type: \"textarea\" }, // Content\r\n        { name: \"project_manager\", height: 16, type: \"template\", map_to: \"project_manager\"}, // PM\r\n        { name: \"member\", height: 60, type: \"template\", map_to: \"member\"}, //manager\r\n        { name: \"priority\", height: 22, map_to: \"status\", type: \"select\",\r\n          options: [\r\n            // status\r\n            { key: \"todo\", label: \"해야 할 일\" },\r\n            { key: \"ongoing\", label: \"진행 중\" },\r\n            { key: \"done\", label: \"완료됨\" },\r\n          ],\r\n        },\r\n        {\r\n          name: \"period\", height: 72, type: \"time\", map_to: \"dedline\", time_format: [\"%Y\", \"%m\", \"%d\"],\r\n        }, //Deadline\r\n      ];\r\n      gantt.locale.labels.section_todo_title = \"Todo\";\r\n      gantt.locale.labels.section_content = \"Explanation\";\r\n      gantt.locale.labels.section_project_manager = \"PM\";\r\n      gantt.locale.labels.section_member = \"담당자\";\r\n      gantt.locale.labels.section_priority = \"status\";\r\n      gantt.locale.labels.section_period = \"deadline\";\r\n\r\n      gantt.attachEvent(\"onTaskLoading\", function (task) {\r\n        task.start_date = new Date(task.start_date);\r\n        task.end_date = new Date(task.end_date);\r\n        return true;\r\n      });\r\n      //todo 모달창 열때 기본값\r\n      gantt.attachEvent(\"onTaskCreated\", (task) => {\r\n        task.project_manager = this.$store.state.selectedProject.project_manager;\r\n        task.member = this.$store.state.loginMember.member_name;\r\n        return true;\r\n      });\r\n      gantt.templates.task_text = function(start,end,task){\r\n      return task.todo_title;  \r\n      };\r\n\r\n      gantt.attachEvent(\"onLightboxSave\", (id, task, is_new) => {\r\n        task.start_date = this.$store.getters.formatDate(task.start_date);\r\n        task.due_date = this.$store.getters.formatDate(task.end_date);\r\n        delete task.end_date;\r\n        console.log(\"라이트박스 task>>>\", task);\r\n        const sendtask = {\r\n          todo_num: id,\r\n          todo_title: task.todo_title,\r\n          status: task.status, \r\n          start_date: task.start_date, \r\n          due_date: task.due_date,\r\n          member_name: task.member,\r\n          member_num: this.$store.state.loginMember.member_num,\r\n          content: task.content\r\n        };\r\n        console.log(\"is_new\",is_new);\r\n        this.saveTaskToServer(sendtask);\r\n        return true; // 이를 반환하여 gantt가 작업을 저장하게 합니다.\r\n      });\r\n      gantt.createDataProcessor((entity, action, data, id) => {\r\n        this.$emit(`${entity}-updated`, id, action, data);\r\n      });\r\n      //document.querySelector(\".gantt_radio[value='\" + config.name + \"']\").checked = true;\r\n      //초기화\r\n      gantt.init(this.$refs.gantt);\r\n      gantt.parse(this.$props.tasks);\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n@import \"~dhtmlx-gantt/codebase/dhtmlxgantt.css\";\r\ndiv[ref=\"gantt\"] {\r\n  width: 100%;\r\n  height: 800px;\r\n}\r\n\r\n.gantt-c {\r\n  min-height: 600px;\r\n}\r\n</style>"],"mappings":";;EACOA,GAAG,EAAC,OAAO;EAACC,KAAK,EAAC;;gCAUrBC,mBAAA,CAAqC;EAA9BC,GAAG,EAAC;AAAQ,GAAC,WAAS;gCAU7BD,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAQ,GAAC,YAAU;gCAU9BD,mBAAA,CAAuC;EAAhCC,GAAG,EAAC;AAAQ,GAAC,aAAW;gCAU/BD,mBAAA,CAAyC;EAAlCC,GAAG,EAAC;AAAQ,GAAC,eAAa;gCAUjCD,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAQ,GAAC,YAAU;;;6DAlDhCD,mBAAA,CAAuC,OAAvCE,UAAuC,+BACvCF,mBAAA,CAkDM,c,gBAjDJA,mBAAA,CAOE;IANAG,IAAI,EAAC,OAAO;IACZC,EAAE,EAAC,QAAQ;IACXL,KAAK,EAAC,aAAa;IACnBM,IAAI,EAAC,OAAO;IACZC,KAAK,EAAC,KAAK;+DACFC,KAAA,CAAAC,aAAa,GAAAC,MAAA;kDAAbF,KAAA,CAAAC,aAAa,E,GAExBE,UAAqC,E,gBAErCV,mBAAA,CAOE;IANAG,IAAI,EAAC,OAAO;IACZC,EAAE,EAAC,QAAQ;IACXL,KAAK,EAAC,aAAa;IACnBM,IAAI,EAAC,OAAO;IACZC,KAAK,EAAC,MAAM;+DACHC,KAAA,CAAAC,aAAa,GAAAC,MAAA;kDAAbF,KAAA,CAAAC,aAAa,E,GAExBG,UAAsC,E,gBAEtCX,mBAAA,CAOE;IANAG,IAAI,EAAC,OAAO;IACZC,EAAE,EAAC,QAAQ;IACXL,KAAK,EAAC,aAAa;IACnBM,IAAI,EAAC,OAAO;IACZC,KAAK,EAAC,OAAO;+DACJC,KAAA,CAAAC,aAAa,GAAAC,MAAA;kDAAbF,KAAA,CAAAC,aAAa,E,GAExBI,UAAuC,E,gBAEvCZ,mBAAA,CAOE;IANAG,IAAI,EAAC,OAAO;IACZC,EAAE,EAAC,QAAQ;IACXL,KAAK,EAAC,aAAa;IACnBM,IAAI,EAAC,OAAO;IACZC,KAAK,EAAC,SAAS;+DACNC,KAAA,CAAAC,aAAa,GAAAC,MAAA;kDAAbF,KAAA,CAAAC,aAAa,E,GAExBK,UAAyC,E,gBAEzCb,mBAAA,CAOE;IANAG,IAAI,EAAC,OAAO;IACZC,EAAE,EAAC,QAAQ;IACXL,KAAK,EAAC,aAAa;IACnBM,IAAI,EAAC,OAAO;IACZC,KAAK,EAAC,MAAM;+DACHC,KAAA,CAAAC,aAAa,GAAAC,MAAA;kDAAbF,KAAA,CAAAC,aAAa,E,GAExBM,UAAsC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}