{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    projectList: [],\n    selectedProject: {},\n    todoList: [],\n    selectedTodo: {},\n    loginMember: {}\n  },\n  getters: {\n    formatDate: () => dateString => {\n      const date = new Date(dateString);\n      let month = '' + (date.getMonth() + 1);\n      let day = '' + date.getDate();\n      const year = date.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n  },\n  mutations: {\n    setProjectList(state, projects) {\n      state.projectList = projects.map(project => {\n        // 프로젝트의 특정 날짜 속성들을 변환 (예: 'startDate' 및 'dueDate')\n        if (project.start_date) {\n          project.start_date = this.getters.formatDate(project.start_date);\n        }\n        if (project.due_date) {\n          project.due_date = this.getters.formatDate(project.due_date);\n        }\n        console.log(project);\n        return project;\n      });\n    },\n    setSelectedProject(state, project) {\n      if (project.start_date) {\n        project.start_date = this.getters.formatDate(project.start_date);\n      }\n      if (project.due_date) {\n        project.due_date = this.getters.formatDate(project.due_date);\n      }\n      state.selectedProject = project;\n    },\n    setTodosData(state, todos) {\n      console.log('Setting selected todo:', todos);\n      state.todoList = todos;\n    },\n    setSelectedTodo(state, todo) {\n      state.selectedTodo = todo;\n    },\n    setLoginMember(state, member) {\n      state.loginMember = member;\n    },\n    updateProjectInList(state, updatedProject) {\n      const index = state.projectList.findIndex(p => p.project_num === updatedProject.project_num);\n      if (index !== -1) {\n        state.projectList.splice(index, 1, updatedProject);\n      }\n    }\n  },\n  actions: {\n    updateProjectsData({\n      commit\n    }, projects) {\n      commit('setProjectList', projects);\n    },\n    updateSelectedProject({\n      commit\n    }, project) {\n      commit('setSelectedProject', project);\n    },\n    updateTodosData({\n      commit\n    }, todos) {\n      commit('setTodosData', todos);\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","projectList","selectedProject","todoList","selectedTodo","loginMember","getters","formatDate","dateString","date","Date","month","getMonth","day","getDate","year","getFullYear","length","join","mutations","setProjectList","projects","map","project","start_date","due_date","console","log","setSelectedProject","setTodosData","todos","setSelectedTodo","todo","setLoginMember","member","updateProjectInList","updatedProject","index","findIndex","p","project_num","splice","actions","updateProjectsData","commit","updateSelectedProject","updateTodosData"],"sources":["C:/vue_everyware/WBS/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\r\n\r\n\r\nexport default createStore({\r\n  state: {\r\n    projectList: [],\r\n    selectedProject: {},\r\n    todoList: [],\r\n    selectedTodo: {},\r\n    loginMember: {}\r\n  },\r\n  getters: {\r\n    formatDate: () => (dateString) => {\r\n      const date = new Date(dateString);\r\n      let month = '' + (date.getMonth() + 1);\r\n      let day = '' + date.getDate();\r\n      const year = date.getFullYear();\r\n\r\n      if (month.length < 2) month = '0' + month;\r\n      if (day.length < 2) day = '0' + day;\r\n\r\n      return [year, month, day].join('-');\r\n    }\r\n  },\r\n  mutations: {\r\n    setProjectList(state, projects) {\r\n      state.projectList = projects.map(project => {\r\n        // 프로젝트의 특정 날짜 속성들을 변환 (예: 'startDate' 및 'dueDate')\r\n        if (project.start_date) {\r\n          project.start_date = this.getters.formatDate(project.start_date);\r\n        }\r\n        if (project.due_date) {\r\n          project.due_date = this.getters.formatDate(project.due_date);\r\n        }\r\n        console.log(project);\r\n        return project;\r\n      });\r\n    },\r\n    setSelectedProject(state, project) {\r\n      if (project.start_date) {\r\n        project.start_date = this.getters.formatDate(project.start_date);\r\n      }\r\n      if (project.due_date) {\r\n        project.due_date = this.getters.formatDate(project.due_date);\r\n      }\r\n      state.selectedProject = project;\r\n    },\r\n    setTodosData(state, todos) {\r\n      console.log('Setting selected todo:', todos);\r\n      state.todoList = todos;\r\n    },\r\n    setSelectedTodo(state, todo) {\r\n      state.selectedTodo = todo;\r\n    },\r\n    setLoginMember(state, member) {\r\n      state.loginMember = member;\r\n    },\r\n    updateProjectInList(state, updatedProject) {\r\n      const index = state.projectList.findIndex(p => p.project_num === updatedProject.project_num);\r\n      if (index !== -1) {\r\n        state.projectList.splice(index, 1, updatedProject);\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    updateProjectsData({ commit }, projects) {\r\n      commit('setProjectList', projects);\r\n    },\r\n    updateSelectedProject({ commit }, project) {\r\n      commit('setSelectedProject', project);\r\n    },\r\n    updateTodosData({ commit }, todos) {\r\n      commit('setTodosData', todos);\r\n    }\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}